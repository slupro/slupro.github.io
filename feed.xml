<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://slupro.github.io/</id><title>slu blog</title><subtitle>slu blog</subtitle> <updated>2023-04-12T23:01:52+10:00</updated> <author> <name>Steven</name> <uri>https://slupro.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://slupro.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://slupro.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 Steven </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>算法学习笔记</title><link href="https://slupro.github.io/posts/Algorithm-in-one-page/" rel="alternate" type="text/html" title="算法学习笔记" /><published>2021-12-04T02:00:00+11:00</published> <updated>2021-12-04T17:55:28+11:00</updated> <id>https://slupro.github.io/posts/Algorithm-in-one-page/</id> <content src="https://slupro.github.io/posts/Algorithm-in-one-page/" /> <author> <name>Steven Lu @slupro</name> </author> <category term="学习笔记" /> <summary> 之前在极客时间学习算法时做的笔记，截图很多引用自王争的《数据结构与算法之美》，推荐大家可以买书或者去极客时间学习。 时间复杂度(O) 图 链表 写链表的注意事项 重点留意边界条件处理经常用来检查链表是否正确的边界4个边界条件： 如果链表为空时，代码是否能正常工作？ 如果链表只包含一个节点时，代码是否能正常工作？ 如果链表只包含两个节点时，代码是否能正常工作？ 代码逻辑在处理头尾节点时是否能正常工作？ 多练习，画图帮助思考 5个常见的链表操作： 单链表反转 链表中环的检测 两个有序链表合并 删除链表倒数第n个节点 求链表的中间节点 添加，打印 若用函数参数返回新产生的链表，则需要使用指向指针的指针！ 下面的例子中的函数使用了可变长参数 #include &amp;lt;stdio.h&amp;gt; #includ... </summary> </entry> <entry><title>Kickstart Red Hat Enterprise Linux 8 by PXE server</title><link href="https://slupro.github.io/posts/kickstart-RHEL-8-by-PXE-server/" rel="alternate" type="text/html" title="Kickstart Red Hat Enterprise Linux 8 by PXE server" /><published>2021-11-20T09:00:00+11:00</published> <updated>2021-11-20T09:00:00+11:00</updated> <id>https://slupro.github.io/posts/kickstart-RHEL-8-by-PXE-server/</id> <content src="https://slupro.github.io/posts/kickstart-RHEL-8-by-PXE-server/" /> <author> <name>Steven Lu @slupro</name> </author> <category term="学习笔记" /> <summary> Kickstart RHEL 8 Automated installation steps Create a Kickstart file. Prepare the Linux installation ISO or installation files. Setup PXE server. Setup Web server to provide Kickstart file and installation files. It could be replaced by NFS or FTP. Start the client machine to start the installation. (PXE needs to be supported and enabled in BIOS) Create a Kickstart file Kick... </summary> </entry> <entry><title>Linux网络-接收数据包</title><link href="https://slupro.github.io/posts/Linux-network-rcv/" rel="alternate" type="text/html" title="Linux网络-接收数据包" /><published>2021-10-15T13:00:00+11:00</published> <updated>2023-04-12T17:05:52+10:00</updated> <id>https://slupro.github.io/posts/Linux-network-rcv/</id> <content src="https://slupro.github.io/posts/Linux-network-rcv/" /> <author> <name>Steven Lu @slupro</name> </author> <category term="学习笔记" /> <summary> 基于Linux kernel 6.0 Linux内核收包总览 sequenceDiagram participant Network participant NIC participant CPU participant Kernel participant User Network-&amp;gt;&amp;gt;NIC: 数据帧从外部网络到达网卡 NIC-&amp;gt;&amp;gt;Kernel: 网卡把帧 DMA 到内存RingBuffer NIC-&amp;gt;&amp;gt;CPU: 网卡硬中断通知 CPU CPU-&amp;gt;&amp;gt;Kernel: CPU 响应硬中断，简单处理后发出软中断 Kernel--&amp;gt;&amp;gt;Kernel: ksoftirqd线程处理软中断，调用网卡驱动注册的poll函数开始收包 Note right of Kernel: 帧被从R... </summary> </entry> <entry><title>在 WSL 和 CentOS 7 中编译openjdk-17-ga</title><link href="https://slupro.github.io/posts/build-openjdk-17-ga/" rel="alternate" type="text/html" title="在 WSL 和 CentOS 7 中编译openjdk-17-ga" /><published>2021-09-16T13:00:00+10:00</published> <updated>2021-09-16T13:00:00+10:00</updated> <id>https://slupro.github.io/posts/build-openjdk-17-ga/</id> <content src="https://slupro.github.io/posts/build-openjdk-17-ga/" /> <author> <name>Steven Lu @slupro</name> </author> <category term="学习笔记" /> <summary> 昨天 openjdk 发布了 17GA，折腾了会儿在 Windows(WSL) 和 CentOS 7.9 上都编译出来了。记录一下。 Windows(WSL) Windows下可以用Cygwin或者WSL编译openjdk，因为我已经装了WSL了，所以就用WSL来编译。 下载完 openjdk-17-ga 的zip文件，解压，运行 wsl，并进入解压后的目录（比如我的是/mnt/d/GitHub_Repo/jdk-jdk-17-ga）。使用下面的步骤安装： 首先需要安装编译所需要的一些依赖文件，有些是我以前装的包，不确定是不是 openjdk 的编译也需要，我都包括进来了。 sudo apt install gcc autoconf make zip unzip build-essential libx11-dev libxext-dev libxrender-de... </summary> </entry> <entry><title>Kubernetes 学习笔记</title><link href="https://slupro.github.io/posts/learn-kubernetes-in-one-page/" rel="alternate" type="text/html" title="Kubernetes 学习笔记" /><published>2021-09-13T12:00:00+10:00</published> <updated>2021-09-13T12:00:00+10:00</updated> <id>https://slupro.github.io/posts/learn-kubernetes-in-one-page/</id> <content src="https://slupro.github.io/posts/learn-kubernetes-in-one-page/" /> <author> <name>Steven Lu @slupro</name> </author> <category term="学习笔记" /> <summary> 介绍 学习《kubernetes in action》时做的笔记，书中使用的k8s的版本和目前的版本有差距，但大体概念没有变。转载请注明来自：https://slupro.github.io/ k8s的需求 从单一应用到微服务：满足可横向和纵向扩展的需求，聚焦于总的资源池。 为开发和部署提供一致的环境：避免了环境差异的问题，比如服务间库的冲突等。 持续交付：DevOps和NoOps：一个团队参与开发、部署、运维，是为DevOps，Dev更多地接触生产中的应用，能帮助理解用户需求和问题，更好理解运维团队维护应用所面临的困难。开发者直接部署，不需要系统管理员的帮助，NoOps，系统管理员只关注底层基础设置运转正常。 Docker Linux namespace: 限制view：文件、进程、网络接口、主机名等。 Linux cgroups：限制进程... </summary> </entry> </feed>
